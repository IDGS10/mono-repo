--[[
    Author: Angel Eduardo Anaya
    Program: SSE (Server Sent Event)
    
    Objective: Provide an compiled real time service to avoid
    overhead processes by not compiled languages performing raw
    requests in Lua programming language selected by simplicity and 
    High-loads management.
    
    
    Comments:
    Current code parse Tempature data generated by IoT device identified as "host"
--]]


local http = require "resty.http"
local cjson = require "cjson"

ngx.header["Content-Type"] = "text/event-stream"
ngx.header["Cache-Control"] = "no-cache"
ngx.header["Connection"] = "keep-alive"

local httpc = http.new()
-- REMEMBER TO AVOID USE "LOCALHOST" not DNS resolution native provided
local url = "http://127.0.0.1:8086/api/v2/query?org=my-org" -- org= To our organization name
local token = "Token my-super-token" -- "Token " prefix is mandatory to sent our token

local flux_query = [[
from(bucket:"iot-bucket")
  |> range(start: -1m)
  |> filter(fn: (r) => r._measurement == "temperature")
  |> last()
]]

local function parse_csv_line(line)
    local fields = {}
    local field = ""
    local in_quotes = false
    
    for i = 1, #line do
        local char = line:sub(i, i)
        if char == '"' then
            in_quotes = not in_quotes
        elseif char == ',' and not in_quotes then
            table.insert(fields, field)
            field = ""
        else
            field = field .. char
        end
    end
    -- Add the last field
    table.insert(fields, field)
    
    return fields
end

local function query_influx()
    local res, err = httpc:request_uri(url, {
        method = "POST",
        body = flux_query,
        headers = {
            ["Authorization"] = token,
            ["Content-Type"] = "application/vnd.flux",
            ["Accept"] = "application/csv"
        }
    })

    if not res then
        ngx.say("event: error\ndata: Failed to query InfluxDB: " .. (err or "unknown") .. "\n\n")
        ngx.flush(true)
        return
    end

    if res.status ~= 200 then
        ngx.say("event: error\ndata: InfluxDB returned status: " .. res.status .. "\n\n")
        ngx.flush(true)
        return
    end

    -- DEBUG = show raw response (you can comment these out later)
    ngx.say("event: debug\ndata: response status = " .. res.status .. "\n\n")
    ngx.say("event: debug\ndata: response body = " .. (res.body or "") .. "\n\n")

    -- Parse CSV and extract temperature readings
    local csv = res.body
    local temperatures = {}
    local lines = {}
    
    -- Split CSV into lines
    for line in csv:gmatch("[^\r\n]+") do
        table.insert(lines, line)
    end
    
    -- Process data lines (skip header and comment lines)
    for i, line in ipairs(lines) do
        if line ~= "" and not line:match("^#") and not line:match("^,?result,") then
            local fields = parse_csv_line(line)
            
            -- CSV structure: ,result,table,_start,_stop,_time,_value,_field,_measurement,host
            -- Index:          1  2     3     4      5     6     7      8      9           10
            if #fields >= 10 then
                local host = fields[10]
                local temp_value = tonumber(fields[7]) -- _value is at index 7
                local timestamp = fields[6] -- _time is at index 6
                
                if temp_value and host then
                    table.insert(temperatures, {
                        host = host,
                        temperature = temp_value,
                        timestamp = timestamp
                    })
                end
            end
        end
    end
    
    -- Send the parsed data as JSON
    local data = cjson.encode({
        temperatures = temperatures,
        count = #temperatures,
        timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ") -- Current UTC timestamp
    })

    ngx.say("data: " .. data .. "\n\n")
    ngx.flush(true)
end

while true do
    query_influx()
    ngx.sleep(3) -- Time out to sent Real-Time events
end
