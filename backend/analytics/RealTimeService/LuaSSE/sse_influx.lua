--[[
    Author: Angel Eduardo Anaya
    Program: SSE (Server Sent Event)
    
    Description: Provide an compiled real time service to avoid
    overhead processes by not compiled languages performing raw
    requests in Lua programming language selected by simplicity and 
    High workloads management.
    
    
    Comments:
    Current code parse Tempature data generated by IoT device identified as "host"
    - Updated handle real connections WEB based with CORS preflights
--]]
local http = require "resty.http"
local cjson = require "cjson"

-- Set SSE headers (CORS se maneja en el reverse proxy)
ngx.header["Content-Type"] = "text/event-stream"
ngx.header["Cache-Control"] = "no-cache"
ngx.header["Connection"] = "keep-alive"
ngx.header["X-Accel-Buffering"] = "no"

local httpc = http.new()
local url = "http://127.0.0.1:8086/api/v2/query?org=my-org"
local token = "Token my-super-token"

local flux_query = [[
from(bucket:"iot-bucket")
  |> range(start: -1m)
  |> filter(fn: (r) => r._measurement == "temperature")
  |> last()
]]

-- Send keepalive ping
local function send_ping()
    ngx.say("event: ping\ndata: " .. ngx.now() .. "\n\n")
    ngx.flush(true)
end

-- Check if client is still connected
local function is_client_connected()
    local ok, err = ngx.flush(true)
    if not ok then
        ngx.log(ngx.ERR, "Client disconnected: ", err)
        return false
    end
    return true
end

local function parse_csv_line(line)
    local fields = {}
    local field = ""
    local in_quotes = false

    for i = 1, #line do
        local char = line:sub(i, i)
        if char == '"' then
            in_quotes = not in_quotes
        elseif char == ',' and not in_quotes then
            table.insert(fields, field)
            field = ""
        else
            field = field .. char
        end
    end
    table.insert(fields, field)
    return fields
end

local function query_influx()
    -- Check client connection before making request
    if not is_client_connected() then
        return false
    end

    local res, err = httpc:request_uri(url, {
        method = "POST",
        body = flux_query,
        headers = {
            ["Authorization"] = token,
            ["Content-Type"] = "application/vnd.flux",
            ["Accept"] = "application/csv"
        },
        timeout = 5000  -- 5 second timeout
    })

    if not res then
        local error_msg = "Failed to query InfluxDB: " .. (err or "unknown")
        ngx.log(ngx.ERR, error_msg)
        ngx.say("event: error\ndata: " .. error_msg .. "\n\n")
        ngx.flush(true)
        return true  -- Continue trying
    end

    if res.status ~= 200 then
        local error_msg = "InfluxDB returned status: " .. res.status
        ngx.log(ngx.ERR, error_msg, " Body: ", res.body or "")
        ngx.say("event: error\ndata: " .. error_msg .. "\n\n")
        ngx.flush(true)
        return true  -- Continue trying
    end

    -- Handle empty response
    if not res.body or res.body == "" then
        ngx.log(ngx.WARN, "Empty response from InfluxDB")
        ngx.say("event: empty\ndata: No data available\n\n")
        ngx.flush(true)
        return true
    end

    -- Parse CSV and extract temperature readings
    local csv = res.body
    local temperatures = {}
    local lines = {}

    -- Split CSV into lines
    for line in csv:gmatch("[^\r\n]+") do
        table.insert(lines, line)
    end

    -- Log raw CSV for debugging
    ngx.log(ngx.INFO, "CSV lines count: ", #lines)

    -- Process data lines (skip header and comment lines)
    for i, line in ipairs(lines) do
        if line ~= "" and not line:match("^#") and not line:match("^,?result,") then
            local fields = parse_csv_line(line)

            if #fields >= 10 then
                local host = fields[10]
                local temp_value = tonumber(fields[7])
                local timestamp = fields[6]

                if temp_value and host then
                    table.insert(temperatures, {
                        host = host,
                        temperature = temp_value,
                        timestamp = timestamp
                    })
                end
            end
        end
    end

    -- Always send a response, even if no temperatures found
    local data = cjson.encode({
        temperatures = temperatures,
        count = #temperatures,
        timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ"),
        raw_lines = #lines  -- Debug info
    })

    ngx.say("data: " .. data .. "\n\n")
    ngx.flush(true)
    return true
end

-- Send initial connection established message
ngx.say("event: connected\ndata: SSE connection established\n\n")
ngx.flush(true)

local iteration = 0
while true do
    iteration = iteration + 1

    -- Send periodic ping every 10 iterations (30 seconds)
    if iteration % 10 == 0 then
        send_ping()
    end

    -- Query InfluxDB
    local should_continue = query_influx()
    if not should_continue then
        break  -- Client disconnected
    end

    -- Sleep for 3 seconds
    ngx.sleep(3)

    -- Safety check to prevent infinite loops
    if iteration > 10000 then
        ngx.log(ngx.WARN, "SSE connection reached iteration limit")
        break
    end
end

ngx.log(ngx.INFO, "SSE connection ended after ", iteration, " iterations")
