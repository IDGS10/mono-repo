name: Telegram Notifier Pro+

on:
  push:
    branches: ['**']
    tags: ['**']
    paths-ignore: 
      - 'docs/**'
      - 'README.md'
  pull_request:
    types: [opened, closed, reopened, ready_for_review, synchronize]
  issues:
    types: [opened, closed, reopened, labeled, assigned]
  workflow_run:
    workflows: ["CI", "Tests", "Security Scan"]
    types: [completed, requested]
  release:
    types: [published, edited]

jobs:
  notify-telegram:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - name: Send Smart Notification
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          ENVIRONMENT: ${{ github.event_name == 'release' && 'PROD' || 'DEV' }}
        run: |
          #!/bin/bash
          set -e

          # Configuraci√≥n b√°sica
          REPO_NAME="${{ github.repository }}"
          REPO_URL="${{ github.server_url }}/$REPO_NAME"
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          CURRENT_TIME=$(date +"%Y-%m-%d %H:%M:%S %Z")

          # Funci√≥n para escapar caracteres especiales de MarkdownV2
          escape_markdown() {
            echo "$1" | sed -e 's/[_\*\[\]()~`\>#+\-=\|{}\.!]/\\&/g'
          }

          # Mensaje base
          MESSAGE=""

          # Detectamos evento y generamos mensaje
          case "${{ github.event_name }}" in

            "push")
              COMMIT_MSG=$(escape_markdown "${{ github.event.head_commit.message }}" | cut -c1-100)

              NUM_ADDED=$(echo "${{ github.event.head_commit.added }}" | wc -w 2>/dev/null || echo 0)
              NUM_MODIFIED=$(echo "${{ github.event.head_commit.modified }}" | wc -w 2>/dev/null || echo 0)
              NUM_CHANGES=$((NUM_ADDED + NUM_MODIFIED))

              if [ "$NUM_CHANGES" -gt 20 ]; then
                CHANGE_EMOJI="üì¶"
              elif [ "$NUM_CHANGES" -gt 5 ]; then
                CHANGE_EMOJI="üìÇ"
              else
                CHANGE_EMOJI="üìÑ"
              fi

              MESSAGE="üöÄ *Push en $(escape_markdown "$REPO_NAME")* [$REPO_URL] ($REPO_URL) [$ENVIRONMENT]
                      \n‚ñ´Ô∏è *Rama*: \`$(escape_markdown "${GITHUB_REF##*/}")\`
                      \n‚ñ´Ô∏è *Autor*: [@$(escape_markdown "${{ github.actor }}")]($REPO_URL/${{ github.actor }})
                      \n‚ñ´Ô∏è *Commit*: [\`$SHORT_SHA\`](${{ github.event.head_commit.url }})
                      \n‚ñ´Ô∏è *Mensaje*: $COMMIT_MSG
                      \n${CHANGE_EMOJI} *Archivos modificados*: $NUM_CHANGES
                      \nüïí *Hora*: $CURRENT_TIME"
              ;;

            "pull_request")
              PR_ACTION="${{ github.event.action }}"
              IS_MERGED="${{ github.event.pull_request.merged }}"
              case "$PR_ACTION" in
                "opened") EMOJI="üÜï"; ACTION_TEXT="ABIERTO";;
                "closed") 
                  if [[ "$IS_MERGED" == "true" ]]; then
                    EMOJI="‚úÖ MERGED"; ACTION_TEXT="CERRADO Y FUSIONADO";
                  else
                    EMOJI="‚ùå CLOSED"; ACTION_TEXT="CERRADO";
                  fi;;
                "reopened") EMOJI="üîÅ"; ACTION_TEXT="REABIERTO";;
                "ready_for_review") EMOJI="üëÄ"; ACTION_TEXT="LISTO PARA REVISI√ìN";;
                "synchronize") EMOJI="üîÑ"; ACTION_TEXT="ACTUALIZADO";;
                *) EMOJI="üîÄ"; ACTION_TEXT="ACCION DESCONOCIDA";;
              esac

              PR_TITLE=$(escape_markdown "${{ github.event.pull_request.title }}")
              HEAD_BRANCH=$(escape_markdown "${{ github.event.pull_request.head.ref }}")
              BASE_BRANCH=$(escape_markdown "${{ github.event.pull_request.base.ref }}")
              PR_AUTHOR=$(escape_markdown "${{ github.event.pull_request.user.login }}")
              PR_URL="${{ github.event.pull_request.html_url }}"

              MESSAGE="$EMOJI *PR $ACTION_TEXT: [$PR_TITLE]($PR_URL)*
                      \n‚ñ´Ô∏è *Por*: [@$PR_AUTHOR]($REPO_URL/$PR_AUTHOR)
                      \n‚ñ´Ô∏è *Rama*: \`$HEAD_BRANCH ‚Üí $BASE_BRANCH\`
                      \n‚ñ´Ô∏è *Estado*: ${{ github.event.pull_request.state }}
                      \nüìä *Cambios*: +{{ github.event.pull_request.additions }} -{{ github.event.pull_request.deletions }} (\`${{ github.event.pull_request.changed_files }} archivos\`)
                      \nüïí *Actualizado*: $CURRENT_TIME"
              ;;

            "issues")
              ISSUE_ACTION="${{ github.event.action }}"
              ISSUE_ACTION_UPPER=$(echo "$ISSUE_ACTION" | awk '{print toupper($0)}')

              ISSUE_TITLE=$(escape_markdown "${{ github.event.issue.title }}")
              ISSUE_URL="${{ github.event.issue.html_url }}"
              ISSUE_AUTHOR=$(escape_markdown "${{ github.event.issue.user.login }}")
              ASSIGNEE=$(escape_markdown "${{ github.event.issue.assignee.login }}")
              [ -z "$ASSIGNEE" ] && ASSIGNEE="sin asignar"

              ISSUE_LABELS=$(echo "${{ github.event.issue.labels.*.name }}" | tr ' ' '\n' | grep -v '^$' | tr '\n' ',' | sed 's/,$//')
              [ -z "$ISSUE_LABELS" ] && ISSUE_LABELS="ninguna"

              case "$ISSUE_ACTION" in
                "opened") ISSUE_EMOJI="‚ö†Ô∏è";;
                "closed") ISSUE_EMOJI="‚úÖ";;
                "reopened") ISSUE_EMOJI="üîÅ";;
                "labeled") ISSUE_EMOJI="üè∑Ô∏è";;
                "assigned") ISSUE_EMOJI="üë§";;
                *) ISSUE_EMOJI="‚ÑπÔ∏è";;
              esac

              MESSAGE="$ISSUE_EMOJI *Issue $ISSUE_ACTION_UPPER: [$ISSUE_TITLE]($ISSUE_URL)*
                      \n‚ñ´Ô∏è *Por*: [@$ISSUE_AUTHOR]($REPO_URL/$ISSUE_AUTHOR)
                      \n‚ñ´Ô∏è *Asignado a*: [@$ASSIGNEE]($REPO_URL/$ASSIGNEE)
                      \nüè∑Ô∏è *Etiquetas*: $(escape_markdown "$ISSUE_LABELS")
                      \n‚ñ´Ô∏è *Estado*: ${{ github.event.issue.state }} | üí¨ ${{ github.event.issue.comments }} comentarios
                      \nüïí *Actualizado*: $CURRENT_TIME"
              ;;

            "workflow_run")
              WORKFLOW_NAME="${{ github.event.workflow_run.name }}"
              CREATED_AT="${{ github.event.workflow_run.created_at }}"
              UPDATED_AT="${{ github.event.workflow_run.updated_at }}"
              CREATED_TIMESTAMP=$(date -d "$CREATED_AT" +%s)
              UPDATED_TIMESTAMP=$(date -d "$UPDATED_AT" +%s)
              DURATION_SEC=$((UPDATED_TIMESTAMP - CREATED_TIMESTAMP))
              DURATION_STR=$(printf '%02d:%02d' $((DURATION_SEC/60)) $((DURATION_SEC%60)))

              CONCLUSION="${{ github.event.workflow_run.conclusion }}"
              case "$CONCLUSION" in
                "success") EMOJI="‚úîÔ∏è"; STATUS="EXITOSO";;
                "failure") EMOJI="‚ùå"; STATUS="FALLIDO";;
                "cancelled") EMOJI="üõë"; STATUS="CANCELADO";;
                "skipped") EMOJI="‚è≠Ô∏è"; STATUS="OMITIDO";;
                *) EMOJI="‚ÑπÔ∏è"; STATUS="$(escape_markdown "$CONCLUSION")";;
              esac

              MESSAGE="$EMOJI *Workflow [$WORKFLOW_NAME](${{ github.event.workflow_run.html_url }}) $STATUS*
                      \n‚ñ´Ô∏è *Duraci√≥n*: $DURATION_STR
                      \n‚ñ´Ô∏è *Commit*: [\`$(echo "${{ github.event.workflow_run.head_sha }}" | cut -c1-7)\`]($REPO_URL/commit/${{ github.event.workflow_run.head_sha }})
                      \n‚ñ´Ô∏è *Trigger*: ${{ github.event.workflow_run.event }} | *Ejecutado por*: $(escape_markdown "${{ github.event.workflow_run.actor.login }}")
                      \nüïí *Finalizado*: $CURRENT_TIME"
              ;;
              
            "release")
              RELEASE_ACTION="${{ github.event.action }}"
              case "$RELEASE_ACTION" in
                "published") EMOJI="üéâ";;
                "edited") EMOJI="‚úèÔ∏è";;
                *) EMOJI="üìå";;
              esac

              TAG_NAME=$(escape_markdown "${{ github.event.release.tag_name }}")
              RELEASE_NAME=$(escape_markdown "${{ github.event.release.name }}")
              RELEASE_BODY=$(echo "${{ github.event.release.body }}" | head -n 3 | sed 's/\n/ /g' | escape_markdown)
              HTML_URL="${{ github.event.release.html_url }}"

              MESSAGE="$EMOJI *Nuevo release [$TAG_NAME]($HTML_URL)*
                      \nüìå *T√≠tulo*: $RELEASE_NAME
                      \nüìù *Descripci√≥n*: $RELEASE_BODY...
                      \nüè∑Ô∏è *Pre-release*: ${{ github.event.release.prerelease }} | *Draft*: ${{ github.event.release.draft }}
                      \nüïí *Publicado*: $CURRENT_TIME"
              ;;
          esac

          # Env√≠o con manejo de errores
          echo "Sending notification to Telegram..."
          RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot $TELEGRAM_TOKEN/sendMessage" \
            -d chat_id="$CHAT_ID" \
            -d text="$MESSAGE" \
            -d parse_mode="MarkdownV2" \
            -d disable_web_page_preview="true" \
            -w "\n%{http_code}")

          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          RESPONSE_BODY=$(echo "$RESPONSE" | head -n -1)

          if [ "$HTTP_CODE" != "200" ]; then
            echo "::error::Failed to send Telegram notification. HTTP Code: $HTTP_CODE"
            echo "Response Body: $RESPONSE_BODY"
            exit 1
          else
            echo "‚úÖ Notification sent successfully!"
          fi

        shell: bash