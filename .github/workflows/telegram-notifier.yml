name: Telegram Notifier Pro+
on:
  push:
    ## all branches
    branches: 
      - '**'
    ## all tags
    tags: 
      - '**'
    ## except for docs and README changes
    paths-ignore: 
      - 'docs/**'
      - 'README.md'
  pull_request:
    types: [opened, closed, reopened, ready_for_review, synchronize]
  issues:
    types: [opened, closed, reopened, labeled, assigned]
  workflow_run:
    workflows: ["CI", "Tests", "Security Scan"]
    types: [completed, requested]
  release:
    types: [published, edited]

jobs:
  notify-telegram:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - name: Send Smart Notification
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          ENVIRONMENT: ${{ github.event_name == 'release' && 'PROD' || 'DEV' }}
        run: |
          # Configuraci√≥n avanzada
          REPO_NAME="${{ github.repository }}"
          REPO_URL="${{ github.server_url }}/$REPO_NAME"
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          CURRENT_TIME=$(date +"%Y-%m-%d %H:%M:%S %Z")
          
          # Mensajes din√°micos con emojis contextuales
          case "$GITHUB_EVENT_NAME" in
            "push")
              COMMIT_MSG=$(echo "$GITHUB_EVENT_HEAD_COMMIT_MESSAGE" | sed 's/\n/ /g' | cut -c1-100)
              NUM_CHANGES=$(echo "$GITHUB_EVENT_HEAD_COMMIT_MODIFIED" | jq 'length')
              if [ "$NUM_CHANGES" -gt 20 ]; then CHANGE_EMOJI="üì¶"; 
              elif [ "$NUM_CHANGES" -gt 5 ]; then CHANGE_EMOJI="üìÇ";
              else CHANGE_EMOJI="üìÑ"; fi
              
              MESSAGE="üöÄ *Push en [$REPO_NAME]($REPO_URL)* [${ENVIRONMENT}]
                      \n‚ñ´Ô∏è *Rama*: \`${GITHUB_REF##*/}\`
                      \n‚ñ´Ô∏è *Autor*: [@$GITHUB_ACTOR]($REPO_URL/$GITHUB_ACTOR)
                      \n‚ñ´Ô∏è *Commit*: [\`$SHORT_SHA\`]($GITHUB_EVENT_HEAD_COMMIT_URL) - ${COMMIT_MSG}
                      \n${CHANGE_EMOJI} *Archivos modificados*: $NUM_CHANGES
                      \nüïí *Hora*: $CURRENT_TIME"
              ;;

            "pull_request")
              PR_ACTION=${{ github.event.action }}
              case "$PR_ACTION" in
                "opened") EMOJI="üÜï";;
                "closed") 
                  if ${{ github.event.pull_request.merged }}; then EMOJI="‚úÖ MERGED"; else EMOJI="‚ùå CLOSED"; fi;;
                "reopened") EMOJI="üîÅ";;
                "ready_for_review") EMOJI="üëÄ";;
                "synchronize") EMOJI="üîÑ";;
                *) EMOJI="üîÄ";;
              esac
              
              REVIEWERS=$(echo "${{ github.event.pull_request.requested_reviewers.*.login }}" | jq -r 'join(", @")')
              [ -z "$REVIEWERS" ] && REVIEWERS="ninguno"
              
              MESSAGE="$EMOJI *PR ${PR_ACTION^^}: [${{ github.event.pull_request.title }}](${{ github.event.pull_request.html_url }})*
                      \n‚ñ´Ô∏è *Por*: [@${{ github.actor }}]($REPO_URL/${{ github.actor }})
                      \n‚ñ´Ô∏è *Rama*: \`${{ github.event.pull_request.head.ref }} ‚Üí ${{ github.event.pull_request.base.ref }}\`
                      \n‚ñ´Ô∏è *Estado*: ${{ github.event.pull_request.state }} | *Revisiones*: @$REVIEWERS
                      \nüìä *Cambios*: +${{ github.event.pull_request.additions }} -${{ github.event.pull_request.deletions }} (üîÑ ${{ github.event.pull_request.changed_files }} files)
                      \nüïí *Actualizado*: $CURRENT_TIME"
              ;;

            "issues")
              ISSUE_LABELS=$(echo "${{ github.event.issue.labels.*.name }}" | jq -r 'join(", ")')
              ASSIGNEE=$(echo "${{ github.event.issue.assignee.login }}" || echo "sin asignar")
              
              case "${{ github.event.action }}" in
                "opened") ISSUE_EMOJI="‚ö†Ô∏è";;
                "closed") ISSUE_EMOJI="‚úÖ";;
                "reopened") ISSUE_EMOJI="üîÅ";;
                "labeled") ISSUE_EMOJI="üè∑Ô∏è";;
                "assigned") ISSUE_EMOJI="üë§";;
                *) ISSUE_EMOJI="‚ÑπÔ∏è";;
              esac